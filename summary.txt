UltraLite M-Bus Reader Script Summary
======================================

## Core Purpose
This script reads data from an Itron/Integral-V UltraLite PRO energy meter using PySerial over USB IR interface with M-Bus protocol.

## Communication Protocol
- Wakeup sequence: 0x55 @ 2400 8N1 for ~2.2 seconds
- Commands: SND_NKE + REQ_UD2 @ 2400 8E1 
- Uses primary address (default 0xFE)

## Key Methods

### Debug/Utility Functions
- `hexdump(b, width=16)`: Formats bytes as hex dump with ASCII representation
- `mbus_checksum_ok(fr)`: Validates M-Bus frame checksum and structure
- `find_next_frame(buf)`: Extracts valid M-Bus frames from byte buffer

### Data Decoding Functions
- `decode_bcd_le(data)`: Converts little-endian packed BCD to integer
- `man_code_from_word(w)`: Decodes 16-bit manufacturer code to 3-letter string
- `parse_long_frame(fr)`: Parses complete M-Bus long frame into structured data
- `record_to_human(r)`: Maps VIF codes to human-readable values using VIF_MAP

### Serial Communication Functions
- `short_frame(ctrl, addr)`: Creates M-Bus short frame with checksum
- `send_wakeup_8N1(ser, debug)`: Sends wakeup sequence at 2400 8N1
- `send_cmds_8E1(ser, addr, debug)`: Sends SND_NKE + REQ_UD2 at 2400 8E1
- `read_window(ser, window_s, debug, save_fh)`: Reads serial data within time window

### Output Functions
- `print_human(parsed, show_generic, compute_power)`: Displays parsed values in readable format
- `main()`: Main loop handling command line args and continuous reading

## Value Mappings (VIF_MAP)
The script maps M-Bus VIF (Value Information Field) codes to meaningful values:

### Energy & Volume
- 0x06: energy_total (kWh) - cumulative energy consumption
- 0x14: volume_total (m³, 0.01 resolution) - cumulative volume in BCD format
- 0x38-0x3F: volume_flow (m³/h) - current flow rate with variable scaling

### Temperature
- 0x5A: flow_temperature (°C, 0.1 resolution) - supply temperature
- 0x5E: return_temperature (°C, 0.1 resolution) - return temperature  
- 0x61: delta_temperature (K, 0.01 resolution) - temperature difference

### Device Information
- 0x27: operating_time_days (days) - device operational time
- 0x6D: time_point (epoch seconds -> ISO-8601) - timestamp
- 0x78: serial_number (8-digit BCD) - device serial number

### Extended VIF (0xFD + VIFE)
- 0x0E: firmware_version (uint8)
- 0x0F: software_version (uint8)
- 0x08: access_number (uint8)
- 0x09: medium_code (uint8)

## Derived Values
- thermal_power (kW): Calculated as 1.163 * volume_flow(m³/h) * delta_temperature(K)

## Command Line Options
- port: Serial device (default /dev/ttyUSB0)
- --addr: Primary address (default 0xFE) 
- --window: Read window duration (default 2.5s)
- --cycle: Pause between cycles (default 0.5s)
- --debug: Enable raw hex output
- --save: Save raw bytes to file
- --sniff: Listen-only mode (no commands sent)
- --show-generic: Show unmapped records

## Error Handling
- Frame validation with checksums
- Timeout handling for serial communication
- Graceful handling of invalid/incomplete frames
- Keyboard interrupt handling
